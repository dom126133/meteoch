from fastapi import FastAPI, Response, status
from pydantic import ValidationError
import uvicorn
import itertools
import pandas.core.frame
from meteoch.config import STATIONS, MODELS_DET, MODELS_ENS, PARAMETERS, PRODUCTS, INTERFACE
from meteoch.retrieve import retrieve
from meteoch.compute import Threshold_pc
from meteoch.services import compute_coldwave_graph
from meteoch.schemas import Coldwave, Mosmix_tntx
from meteoch.graph import coldwave_graph
from meteoch.mosmix import mosmix_tntx

app = FastAPI(title=INTERFACE['title'])


@app.get("/", status_code = 200)
async def root() -> str:
    """Root Get"""
    return Response(content=f"{INTERFACE['bienvenue']}", media_type="text/plain")

@app.get(
    "/coldwave", 
    # Set what the media type will be in the autogenerated OpenAPI specification.
    # fastapi.tiangolo.com/advanced/additional-responses/#additional-media-types-for-the-main-response
    responses = {
        200: {
            "content": {"image/png": {}}
        }
    },
    # Prevent FastAPI from adding "application/json" as an additional
    # response media type in the autogenerated OpenAPI specification.
    # https://github.com/tiangolo/fastapi/issues/3258
    response_class=Response,
    status_code=status.HTTP_200_OK
)
async def coldwave(station:str, response: Response):
    """ColdWave for specified station"""

    try:
        Coldwave(station=station)
    except ValidationError as e:
        response.status_code = status.HTTP_400_BAD_REQUEST
        return f"Error: {str(e)}!"

    graph = compute_coldwave_graph(station)

    return Response(content=graph, media_type="image/png")

@app.get("/mosmix/tntx",
    # Set what the media type will be in the autogenerated OpenAPI specification.
    # fastapi.tiangolo.com/advanced/additional-responses/#additional-media-types-for-the-main-response
    responses = {
        200: {
            "content": {"text/plain": {}}
        }
    },
    # Prevent FastAPI from adding "application/json" as an additional
    # response media type in the autogenerated OpenAPI specification.
    # https://github.com/tiangolo/fastapi/issues/3258
    response_class=Response,
    status_code=status.HTTP_200_OK
)
async def get_mosmix_tntx(synopid)->str:

    [tn, tx] = mosmix_tntx(synopid)
    return Response(content=f"Tn\n{tn.to_string()}\nTx\n{tx.to_string()}", media_type="text/plain")

if __name__ == "__main__":
    uvicorn.run("asgi:app", host="127.0.0.1", port=8001, reload=True, log_level='debug')
